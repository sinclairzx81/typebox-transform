import { rootNode } from "@ark/schema";
import { isWellFormedInteger, wellFormedIntegerMatcher, wellFormedNumberMatcher } from "@ark/util";
import { scope } from "../scope.js";
import { tryParseDatePattern } from "./utils/date.js";
import { regexStringNode } from "./utils/regex.js";
const number = rootNode({
    in: regexStringNode(wellFormedNumberMatcher, "a well-formed numeric string"),
    morphs: (s) => Number.parseFloat(s)
});
const integer = rootNode({
    in: regexStringNode(wellFormedIntegerMatcher, "a well-formed integer string"),
    morphs: (s, ctx) => {
        if (!isWellFormedInteger(s))
            return ctx.error("a well-formed integer string");
        const parsed = Number.parseInt(s);
        return Number.isSafeInteger(parsed) ? parsed : (ctx.error("an integer in the range Number.MIN_SAFE_INTEGER to Number.MAX_SAFE_INTEGER"));
    }
});
const url = rootNode({
    in: "string",
    morphs: (s, ctx) => {
        try {
            return new URL(s);
        }
        catch {
            return ctx.error("a valid URL");
        }
    }
});
const json = rootNode({
    in: "string",
    morphs: (s, ctx) => {
        try {
            return JSON.parse(s);
        }
        catch {
            return ctx.error("a valid JSON string");
        }
    }
});
const date = rootNode({
    in: "string",
    morphs: (s, ctx) => {
        const result = tryParseDatePattern(s);
        return typeof result === "string" ? ctx.error(result) : result;
    }
});
// support Node18
const File = globalThis.File ?? Blob;
const formData = rootNode({
    in: FormData,
    morphs: (data) => {
        const result = {};
        for (const [k, v] of data) {
            if (k in result) {
                const existing = result[k];
                if (typeof existing === "string" || existing instanceof File)
                    result[k] = [existing, v];
                else
                    existing.push(v);
            }
            else
                result[k] = v;
        }
        return result;
    }
});
export const parsing = scope({
    url,
    number,
    integer,
    date,
    json,
    formData
}, {
    prereducedAliases: true
}).export();
