import * as util from "@ark/util";
import { Hkt } from "@ark/util";
import type { Out } from "../ast.js";
import type { Module } from "../module.js";
import { type inferScope } from "../scope.js";
declare class liftArrayHkt extends Hkt<[element: unknown]> {
    body: util.liftArray<this[0]> extends infer lifted ? (In: this[0] | lifted) => Out<lifted> : never;
}
declare class mergeHkt extends Hkt<[base: object, props: object]> {
    body: util.merge<this[0], this[1]>;
}
declare const arkGenericsExports: {
    liftArray: import("@ark/schema").GenericRoot<readonly [["element", unknown]], liftArrayHkt>;
    merge: import("@ark/schema").GenericRoot<readonly [["base", object], ["props", object]], mergeHkt>;
};
export type arkGenericsExports = inferScope<typeof arkGenericsExports>;
export type arkGenerics = Module<arkGenericsExports>;
export declare const arkGenerics: arkGenerics;
export {};
