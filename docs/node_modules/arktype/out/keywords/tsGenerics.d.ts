import { Hkt, type Key, type omit, type pick, type show } from "@ark/util";
import type { Module } from "../module.js";
import { type inferScope } from "../scope.js";
declare class RecordHkt extends Hkt<[Key, unknown]> {
    body: Record<this[0], this[1]>;
}
declare class PickHkt extends Hkt<[object, Key]> {
    body: pick<this[0], this[1] & keyof this[0]>;
}
declare class OmitHkt extends Hkt<[object, Key]> {
    body: omit<this[0], this[1] & keyof this[0]>;
}
declare class PartialHkt extends Hkt<[object]> {
    body: show<Partial<this[0]>>;
}
declare class RequiredHkt extends Hkt<[object]> {
    body: show<Required<this[0]>>;
}
declare class ExcludeHkt extends Hkt<[unknown, unknown]> {
    body: Exclude<this[0], this[1]>;
}
declare class ExtractHkt extends Hkt<[unknown, unknown]> {
    body: Extract<this[0], this[1]>;
}
declare const tsGenericsExports: {
    Record: import("@ark/schema").GenericRoot<readonly [["K", Key], ["V", unknown]], RecordHkt>;
    Pick: import("@ark/schema").GenericRoot<readonly [["T", object], ["K", Key]], PickHkt>;
    Omit: import("@ark/schema").GenericRoot<readonly [["T", object], ["K", Key]], OmitHkt>;
    Exclude: import("@ark/schema").GenericRoot<readonly [["T", unknown], ["U", unknown]], ExcludeHkt>;
    Extract: import("@ark/schema").GenericRoot<readonly [["T", unknown], ["U", unknown]], ExtractHkt>;
    Partial: import("@ark/schema").GenericRoot<readonly [["T", object]], PartialHkt>;
    Required: import("@ark/schema").GenericRoot<readonly [["T", object]], RequiredHkt>;
};
export type tsGenericsExports = inferScope<typeof tsGenericsExports>;
export type tsGenerics = Module<tsGenericsExports>;
export declare const tsGenerics: tsGenerics;
export {};
