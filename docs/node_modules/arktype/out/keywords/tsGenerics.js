import { genericNode } from "@ark/schema";
import { Hkt } from "@ark/util";
import { scope } from "../scope.js";
import { internal } from "./internal.js";
import { tsKeywords } from "./tsKeywords.js";
class RecordHkt extends Hkt {
}
const Record = genericNode(["K", internal.key], "V")(args => ({
    domain: "object",
    index: {
        signature: args.K,
        value: args.V
    }
}), RecordHkt);
class PickHkt extends Hkt {
}
const Pick = genericNode(["T", tsKeywords.object], ["K", internal.key])(args => args.T.pick(args.K), PickHkt);
class OmitHkt extends Hkt {
}
const Omit = genericNode(["T", tsKeywords.object], ["K", internal.key])(args => args.T.omit(args.K), OmitHkt);
class PartialHkt extends Hkt {
}
const Partial = genericNode(["T", tsKeywords.object])(args => args.T.partial(), PartialHkt);
class RequiredHkt extends Hkt {
}
const Required = genericNode(["T", tsKeywords.object])(args => args.T.required(), RequiredHkt);
class ExcludeHkt extends Hkt {
}
const Exclude = genericNode("T", "U")(args => args.T.exclude(args.U), ExcludeHkt);
class ExtractHkt extends Hkt {
}
const Extract = genericNode("T", "U")(args => args.T.extract(args.U), ExtractHkt);
const tsGenericsExports = {
    Record,
    Pick,
    Omit,
    Exclude,
    Extract,
    Partial,
    Required
};
const $ = scope(tsGenericsExports, {
    prereducedAliases: true
});
export const tsGenerics = $.export();
