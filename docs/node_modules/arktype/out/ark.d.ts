import type { ArkErrors } from "@ark/schema";
import type { inferred } from "./ast.js";
import type { GenericHktParser } from "./generic.js";
import { type arkGenericsExports } from "./keywords/arkGenerics.js";
import { type formattingExports } from "./keywords/format.js";
import { type internalExports } from "./keywords/internal.js";
import { type jsObjectExports } from "./keywords/jsObjects.js";
import { type parsingExports } from "./keywords/parsing.js";
import { type platformObjectExports } from "./keywords/platformObjects.js";
import { type tsGenericsExports } from "./keywords/tsGenerics.js";
import { type tsKeywordExports } from "./keywords/tsKeywords.js";
import { type typedArrayExports } from "./keywords/typedArray.js";
import { type validationExports } from "./keywords/validation.js";
import type { Module, Submodule } from "./module.js";
import { type Scope } from "./scope.js";
import type { DeclarationParser, DefinitionParser, TypeParser } from "./type.js";
export interface Ark extends tsKeywordExports, jsObjectExports, platformObjectExports, validationExports, tsGenericsExports, arkGenericsExports, internalExports {
    TypedArray: Submodule<typedArrayExports>;
    parse: Submodule<parsingExports>;
    format: Submodule<formattingExports>;
}
export declare const ambient: Scope<Ark>;
export declare const ark: Module<Ark>;
export declare const type: TypeParser<{}>;
export declare namespace type {
    type cast<t> = {
        [inferred]?: t;
    };
    type errors = ArkErrors;
}
export declare const generic: GenericHktParser<{}>;
export declare const define: DefinitionParser<{}>;
export declare const declare: DeclarationParser<{}>;
