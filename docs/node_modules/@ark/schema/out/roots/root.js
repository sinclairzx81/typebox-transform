var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
import { bound, cached, includes, omit, throwParseError } from "@ark/util";
import { throwInvalidOperandError } from "../constraint.js";
import { BaseNode, appendUniqueFlatRefs } from "../node.js";
import { Disjoint, writeUnsatisfiableExpressionError } from "../shared/disjoint.js";
import { ArkErrors } from "../shared/errors.js";
import { structuralKinds } from "../shared/implement.js";
import { intersectNodesRoot, pipeNodesRoot } from "../shared/intersections.js";
import { $ark } from "../shared/registry.js";
import { arkKind, hasArkKind } from "../shared/utils.js";
let BaseRoot = (() => {
    let _classSuper = BaseNode;
    let _instanceExtraInitializers = [];
    let _required_decorators;
    let _partial_decorators;
    let _keyof_decorators;
    let __pipe_decorators;
    let _tryPipe_decorators;
    let _get_flatMorphs_decorators;
    return class BaseRoot extends _classSuper {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _required_decorators = [cached];
            _partial_decorators = [cached];
            _keyof_decorators = [cached];
            __pipe_decorators = [bound];
            _tryPipe_decorators = [bound];
            _get_flatMorphs_decorators = [cached];
            __esDecorate(this, null, _required_decorators, { kind: "method", name: "required", static: false, private: false, access: { has: obj => "required" in obj, get: obj => obj.required }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _partial_decorators, { kind: "method", name: "partial", static: false, private: false, access: { has: obj => "partial" in obj, get: obj => obj.partial }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _keyof_decorators, { kind: "method", name: "keyof", static: false, private: false, access: { has: obj => "keyof" in obj, get: obj => obj.keyof }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, __pipe_decorators, { kind: "method", name: "_pipe", static: false, private: false, access: { has: obj => "_pipe" in obj, get: obj => obj._pipe }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _tryPipe_decorators, { kind: "method", name: "tryPipe", static: false, private: false, access: { has: obj => "tryPipe" in obj, get: obj => obj.tryPipe }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _get_flatMorphs_decorators, { kind: "getter", name: "flatMorphs", static: false, private: false, access: { has: obj => "flatMorphs" in obj, get: obj => obj.flatMorphs }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        [arkKind] = (__runInitializers(this, _instanceExtraInitializers), "root");
        get internal() {
            return this;
        }
        as() {
            return this;
        }
        readonly() {
            return this;
        }
        branches = this.hasKind("union") ? this.inner.branches : [this];
        distribute(mapBranch, reduceMapped) {
            const mappedBranches = this.branches.map(mapBranch);
            return reduceMapped?.(mappedBranches) ?? mappedBranches;
        }
        isUnknown() {
            return this.hasKind("intersection") && this.children.length === 0;
        }
        isNever() {
            return this.hasKind("union") && this.children.length === 0;
        }
        intersect(r) {
            const rNode = this.$.parseRoot(r);
            return intersectNodesRoot(this, rNode, this.$);
        }
        toNeverIfDisjoint() {
            return this;
        }
        and(r) {
            const result = this.intersect(r);
            return result instanceof Disjoint ? result.throw() : result;
        }
        or(r) {
            const rNode = this.$.parseRoot(r);
            const branches = [...this.branches, ...rNode.branches];
            return this.$.rootNode(branches);
        }
        assert(data) {
            const result = this.traverse(data);
            return result instanceof ArkErrors ? result.throw() : result;
        }
        pick(...keys) {
            return this.$.rootNode(this.applyStructuralOperation("pick", keys));
        }
        omit(...keys) {
            return this.$.rootNode(this.applyStructuralOperation("omit", keys));
        }
        required() {
            return this.$.rootNode(this.applyStructuralOperation("required", []));
        }
        partial() {
            return this.$.rootNode(this.applyStructuralOperation("partial", []));
        }
        keyof() {
            const result = this.applyStructuralOperation("keyof", []).reduce((result, branch) => result.intersect(branch).toNeverIfDisjoint(), $ark.intrinsic.unknown.internal);
            if (result.branches.length === 0) {
                throwParseError(writeUnsatisfiableExpressionError(`keyof ${this.expression}`));
            }
            return result;
        }
        merge(r) {
            const rNode = this.$.parseRoot(r);
            return this.$.rootNode(rNode.distribute(branch => this.applyStructuralOperation("merge", [
                structureOf(branch) ??
                    throwParseError(writeNonStructuralOperandMessage("merge", branch.expression))
            ])));
        }
        applyStructuralOperation(operation, args) {
            return this.distribute(branch => {
                if (branch.equals($ark.intrinsic.object) && operation !== "merge")
                    // ideally this wouldn't be a special case, but for now it
                    // allows us to bypass `assertHasKeys` checks on base
                    // instantiations of generics like Pick and Omit. Could
                    // potentially be removed once constraints can reference each other:
                    // https://github.com/arktypeio/arktype/issues/1053
                    return branch;
                const structure = structureOf(branch);
                if (!structure) {
                    throwParseError(writeNonStructuralOperandMessage(operation, branch.expression));
                }
                if (operation === "keyof")
                    return structure.keyof();
                const structuralMethodName = operation === "required" ? "require"
                    : operation === "partial" ? "optionalize"
                        : operation;
                return this.$.node("intersection", {
                    ...branch.inner,
                    structure: structure[structuralMethodName](...args)
                });
            });
        }
        get(...path) {
            if (path[0] === undefined)
                return this;
            if (this.hasKind("union")) {
                return this.branches.reduce((acc, b) => acc.or(b.get(...path)), $ark.intrinsic.never.internal);
            }
            const branch = this;
            return (branch.structure?.get(...path) ??
                throwParseError(writeNonStructuralOperandMessage("get", this.expression)));
        }
        extract(r) {
            const rNode = this.$.parseRoot(r);
            return this.$.rootNode(this.branches.filter(branch => branch.extends(rNode)));
        }
        exclude(r) {
            const rNode = this.$.parseRoot(r);
            return this.$.rootNode(this.branches.filter(branch => !branch.extends(rNode)));
        }
        array() {
            return this.$.rootNode({
                proto: Array,
                sequence: this
            }, { prereduced: true });
        }
        overlaps(r) {
            const intersection = this.intersect(r);
            return !(intersection instanceof Disjoint);
        }
        extends(r) {
            const intersection = this.intersect(r);
            return (!(intersection instanceof Disjoint) && this.equals(intersection));
        }
        subsumes(r) {
            return r.extends(this);
        }
        configure(meta) {
            return this.configureShallowDescendants(meta);
        }
        describe(description) {
            return this.configure(description);
        }
        from(input) {
            // ideally we wouldn't validate here but for now we need to do determine
            // which morphs to apply
            return this.assert(input);
        }
        pipe = Object.assign(this._pipe, {
            try: this.tryPipe
        });
        _pipe(...morphs) {
            return morphs.reduce((acc, morph) => acc.pipeOnce(morph), this);
        }
        tryPipe(...morphs) {
            return morphs.reduce((acc, morph) => acc.pipeOnce(hasArkKind(morph, "root") ? morph : ((In, ctx) => {
                try {
                    return morph(In, ctx);
                }
                catch (e) {
                    return ctx.error({
                        code: "predicate",
                        predicate: morph,
                        actual: `aborted due to error:\n    ${e}\n`
                    });
                }
            })), this);
        }
        to(def) {
            return this.toNode(this.$.parseRoot(def));
        }
        toNode(root) {
            const result = pipeNodesRoot(this, root, this.$);
            if (result instanceof Disjoint)
                return result.throw();
            return result;
        }
        pipeOnce(morph) {
            if (hasArkKind(morph, "root"))
                return this.toNode(morph);
            return this.distribute(node => node.hasKind("morph") ?
                this.$.node("morph", {
                    in: node.in,
                    morphs: [...node.morphs, morph]
                })
                : this.$.node("morph", {
                    in: node,
                    morphs: [morph]
                }), branches => this.$.rootNode(branches));
        }
        get flatMorphs() {
            return this.flatRefs.reduce((branches, ref) => appendUniqueFlatRefs(branches, ref.node.hasKind("union") ?
                ref.node.branches
                    .filter(b => b.hasKind("morph"))
                    .map(branch => ({
                    path: ref.path,
                    propString: ref.propString,
                    node: branch
                }))
                : ref.node.hasKind("morph") ? ref
                    : []), []);
        }
        narrow(predicate) {
            return this.constrainOut("predicate", predicate);
        }
        constrain(kind, schema) {
            return this._constrain("root", kind, schema);
        }
        constrainIn(kind, schema) {
            return this._constrain("in", kind, schema);
        }
        constrainOut(kind, schema) {
            return this._constrain("out", kind, schema);
        }
        _constrain(io, kind, schema) {
            const constraint = this.$.node(kind, schema);
            const operand = io === "root" ? this : this[io];
            if (operand.hasKind("morph") ||
                (constraint.impliedBasis && !operand.extends(constraint.impliedBasis))) {
                return throwInvalidOperandError(kind, constraint.impliedBasis, this);
            }
            const partialIntersection = this.$.node("intersection", {
                [kind]: constraint
            });
            const result = io === "out" ?
                pipeNodesRoot(this, partialIntersection, this.$)
                : intersectNodesRoot(this, partialIntersection, this.$);
            if (result instanceof Disjoint)
                result.throw();
            return result;
        }
        onUndeclaredKey(cfg) {
            const rule = typeof cfg === "string" ? cfg : cfg.rule;
            const deep = typeof cfg === "string" ? false : cfg.deep;
            return this.transform((kind, inner) => kind === "structure" ?
                rule === "ignore" ?
                    omit(inner, { undeclared: 1 })
                    : { ...inner, undeclared: rule }
                : inner, deep ? undefined : ({ shouldTransform: node => !includes(structuralKinds, node.kind) }));
        }
        onDeepUndeclaredKey(behavior) {
            return this.onUndeclaredKey({ rule: behavior, deep: true });
        }
        satisfying(predicate) {
            return this.constrain("predicate", predicate);
        }
        divisibleBy(schema) {
            return this.constrain("divisor", schema);
        }
        matching(schema) {
            return this.constrain("pattern", schema);
        }
        atLeast(schema) {
            return this.constrain("min", schema);
        }
        atMost(schema) {
            return this.constrain("max", schema);
        }
        moreThan(schema) {
            return this.constrain("min", exclusivizeRangeSchema(schema));
        }
        lessThan(schema) {
            return this.constrain("max", exclusivizeRangeSchema(schema));
        }
        atLeastLength(schema) {
            return this.constrain("minLength", schema);
        }
        atMostLength(schema) {
            return this.constrain("maxLength", schema);
        }
        moreThanLength(schema) {
            return this.constrain("minLength", exclusivizeRangeSchema(schema));
        }
        lessThanLength(schema) {
            return this.constrain("maxLength", exclusivizeRangeSchema(schema));
        }
        exactlyLength(schema) {
            return this.constrain("exactLength", schema);
        }
        atOrAfter(schema) {
            return this.constrain("after", schema);
        }
        atOrBefore(schema) {
            return this.constrain("before", schema);
        }
        laterThan(schema) {
            return this.constrain("after", exclusivizeRangeSchema(schema));
        }
        earlierThan(schema) {
            return this.constrain("before", exclusivizeRangeSchema(schema));
        }
    };
})();
export { BaseRoot };
export const exclusivizeRangeSchema = (schema) => (typeof schema === "object" && !(schema instanceof Date) ?
    { ...schema, exclusive: true }
    : {
        rule: schema,
        exclusive: true
    });
export const typeOrTermExtends = (t, base) => hasArkKind(base, "root") ?
    hasArkKind(t, "root") ? t.extends(base)
        : base.allows(t)
    : hasArkKind(t, "root") ? t.hasUnit(base)
        : base === t;
const structureOf = (branch) => {
    if (branch.hasKind("morph"))
        return null;
    if (branch.hasKind("intersection")) {
        return (branch.inner.structure ??
            (branch.basis?.domain === "object" ?
                $ark.intrinsic.emptyStructure.bindScope(branch.$)
                : null));
    }
    if (branch.isBasis() && branch.domain === "object")
        return $ark.intrinsic.emptyStructure.bindScope(branch.$);
    return null;
};
export const writeNonStructuralOperandMessage = (operation, operand) => `${operation} operand must be an object (was ${operand})`;
