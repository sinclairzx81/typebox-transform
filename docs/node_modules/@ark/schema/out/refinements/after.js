import { implementNode } from "../shared/implement.js";
import { $ark } from "../shared/registry.js";
import { BaseRange, parseDateLimit, parseExclusiveKey } from "./range.js";
const implementation = implementNode({
    kind: "after",
    collapsibleKey: "rule",
    hasAssociatedError: true,
    keys: {
        rule: {
            parse: parseDateLimit,
            serialize: schema => schema.toISOString()
        },
        exclusive: parseExclusiveKey
    },
    normalize: schema => (typeof schema === "number" ||
        typeof schema === "string" ||
        schema instanceof Date) ?
        { rule: schema }
        : schema,
    defaults: {
        description: node => node.exclusive ?
            `after ${node.stringLimit}`
            : `${node.stringLimit} or later`,
        actual: data => data.toLocaleString()
    },
    intersections: {
        after: (l, r) => (l.isStricterThan(r) ? l : r)
    }
});
export class AfterNode extends BaseRange {
    impliedBasis = $ark.intrinsic.Date.internal;
    traverseAllows = this.exclusive ? data => data > this.rule : data => data >= this.rule;
}
export const After = {
    implementation,
    Node: AfterNode
};
