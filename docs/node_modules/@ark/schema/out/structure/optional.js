import { implementNode } from "../shared/implement.js";
import { BaseProp, intersectProps } from "./prop.js";
const implementation = implementNode({
    kind: "optional",
    hasAssociatedError: false,
    intersectionIsOpen: true,
    keys: {
        key: {},
        value: {
            child: true,
            parse: (schema, ctx) => ctx.$.rootNode(schema)
        },
        default: {
            preserveUndefined: true
        }
    },
    normalize: schema => schema,
    defaults: {
        description: node => `${node.compiledKey}?: ${node.value.description}`
    },
    intersections: {
        optional: intersectProps
    }
});
export class OptionalNode extends BaseProp {
    expression = `${this.compiledKey}?: ${this.value.expression}`;
}
export const Optional = {
    implementation,
    Node: OptionalNode
};
