import { DynamicBase, type anyOrNever } from "@ark/util";
import type { BaseRoot } from "./roots/root.js";
import type { BaseScope, InternalResolution, InternalResolutions } from "./scope.js";
import { arkKind } from "./shared/utils.js";
export type PreparsedNodeResolution = {
    [arkKind]: "generic" | "module";
};
export declare class RootModule<exports extends {} = {}> extends DynamicBase<exports> {
    get [arkKind](): "module";
}
export interface InternalModule<exports extends InternalResolutions = InternalResolutions> extends RootModule<exports> {
}
export declare const bindModule: (module: InternalModule, $: BaseScope) => InternalModule;
type exportSchemaScope<$> = {
    [k in keyof $]: $[k] extends InternalResolution ? [
        $[k]
    ] extends [anyOrNever] ? BaseRoot : $[k] : BaseRoot;
};
export declare const SchemaModule: new <$ = {}>(types: exportSchemaScope<$>) => SchemaModule<$>;
export interface SchemaModule<$ = {}> extends RootModule<exportSchemaScope<$>> {
}
export {};
