import type { YrelValidationInSchemaConfig, YrelSchema, YrelSchemaBoolean, YrelSchemaNumber, YrelSchemaString, YrelSchemaLiteral, YrelSchemaArray, YrelSchemaUnion, YrelSchemaTuple, YrelSchemaObject, YrelSchemaRecord, YrelSchemaAny } from './types';
declare const yrel: {
    any: <Data = any>() => YrelSchemaAny<Data>;
    boolean: (schemaBase?: YrelSchema) => YrelSchemaBoolean;
    number: (schemaBase?: YrelSchema) => YrelSchemaNumber;
    string: (schemaBase?: YrelSchema) => YrelSchemaString;
    literal: <Data_1 extends string | number | boolean>(literal: Data_1, schemaBase?: YrelSchema) => YrelSchemaLiteral<Data_1>;
    array: <Structure extends YrelSchema<any> = YrelSchema<any>>(structure: Structure, schemaBase?: YrelSchema) => YrelSchemaArray<Structure>;
    union: <Structures extends [YrelSchema<any>, YrelSchema<any>, ...YrelSchema<any>[]] = [YrelSchema<any>, YrelSchema<any>]>(structures: Structures, config?: YrelValidationInSchemaConfig, schemaBase?: YrelSchema) => YrelSchemaUnion<Structures>;
    tuple: <Structures_1 extends [YrelSchema<any>, ...YrelSchema<any>[]] = [YrelSchema<any>], RestStructure extends YrelSchema<any> | undefined = undefined>(structures: Structures_1, restStructure?: RestStructure | undefined, schemaBase?: YrelSchema) => YrelSchemaTuple<Structures_1, RestStructure>;
    object: <Shape extends Record<string, YrelSchema<any>> = Record<string, YrelSchema<any>>>(structure: Shape, schemaBase?: YrelSchema) => YrelSchemaObject<Shape>;
    record: <Key extends YrelSchemaString, Value extends YrelSchema<any>>(key: Key, value: Value, schemaBase?: YrelSchema) => YrelSchemaRecord<Key, Value>;
};
declare const y: {
    any: <Data = any>() => YrelSchemaAny<Data>;
    boolean: (schemaBase?: YrelSchema) => YrelSchemaBoolean;
    number: (schemaBase?: YrelSchema) => YrelSchemaNumber;
    string: (schemaBase?: YrelSchema) => YrelSchemaString;
    literal: <Data_1 extends string | number | boolean>(literal: Data_1, schemaBase?: YrelSchema) => YrelSchemaLiteral<Data_1>;
    array: <Structure extends YrelSchema<any> = YrelSchema<any>>(structure: Structure, schemaBase?: YrelSchema) => YrelSchemaArray<Structure>;
    union: <Structures extends [YrelSchema<any>, YrelSchema<any>, ...YrelSchema<any>[]] = [YrelSchema<any>, YrelSchema<any>]>(structures: Structures, config?: YrelValidationInSchemaConfig, schemaBase?: YrelSchema) => YrelSchemaUnion<Structures>;
    tuple: <Structures_1 extends [YrelSchema<any>, ...YrelSchema<any>[]] = [YrelSchema<any>], RestStructure extends YrelSchema<any> | undefined = undefined>(structures: Structures_1, restStructure?: RestStructure | undefined, schemaBase?: YrelSchema) => YrelSchemaTuple<Structures_1, RestStructure>;
    object: <Shape extends Record<string, YrelSchema<any>> = Record<string, YrelSchema<any>>>(structure: Shape, schemaBase?: YrelSchema) => YrelSchemaObject<Shape>;
    record: <Key extends YrelSchemaString, Value extends YrelSchema<any>>(key: Key, value: Value, schemaBase?: YrelSchema) => YrelSchemaRecord<Key, Value>;
};
export { yrel, y };
