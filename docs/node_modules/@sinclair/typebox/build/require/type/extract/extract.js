"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Extract = void 0;
const index_1 = require("../template-literal/index");
const index_2 = require("../union/index");
const index_3 = require("../never/index");
const index_4 = require("../extends/index");
const type_1 = require("../clone/type");
const extract_from_mapped_result_1 = require("./extract-from-mapped-result");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const type_2 = require("../guard/type");
function ExtractRest(L, R) {
    const extracted = L.filter((inner) => (0, index_4.ExtendsCheck)(inner, R) !== index_4.ExtendsResult.False);
    return extracted.length === 1 ? extracted[0] : (0, index_2.Union)(extracted);
}
/** `[Json]` Constructs a type by extracting from type all union members that are assignable to union */
function Extract(L, R, options = {}) {
    // prettier-ignore
    return (0, type_1.CloneType)(((0, type_2.IsMappedResult)(L) ? (0, extract_from_mapped_result_1.ExtractFromMappedResult)(L, R, options) :
        (0, type_2.IsTemplateLiteral)(L) ? Extract((0, index_1.TemplateLiteralToUnion)(L), R) :
            (0, type_2.IsTemplateLiteral)(R) ? Extract(L, (0, index_1.TemplateLiteralToUnion)(R)) :
                (0, type_2.IsUnion)(L) ? ExtractRest(L.anyOf, R) :
                    (0, index_4.ExtendsCheck)(L, R) !== index_4.ExtendsResult.False ? L : (0, index_3.Never)()), options);
}
exports.Extract = Extract;
