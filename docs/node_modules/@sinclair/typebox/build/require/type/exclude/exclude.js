"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Exclude = void 0;
const index_1 = require("../template-literal/index");
const index_2 = require("../union/index");
const index_3 = require("../never/index");
const index_4 = require("../extends/index");
const type_1 = require("../clone/type");
const exclude_from_mapped_result_1 = require("./exclude-from-mapped-result");
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
const type_2 = require("../guard/type");
function ExcludeRest(L, R) {
    const excluded = L.filter((inner) => (0, index_4.ExtendsCheck)(inner, R) === index_4.ExtendsResult.False);
    return excluded.length === 1 ? excluded[0] : (0, index_2.Union)(excluded);
}
/** `[Json]` Constructs a type by excluding from unionType all union members that are assignable to excludedMembers */
function Exclude(L, R, options = {}) {
    // prettier-ignore
    return (0, type_1.CloneType)(((0, type_2.IsMappedResult)(L) ? (0, exclude_from_mapped_result_1.ExcludeFromMappedResult)(L, R, options) :
        (0, type_2.IsTemplateLiteral)(L) ? Exclude((0, index_1.TemplateLiteralToUnion)(L), R) :
            (0, type_2.IsTemplateLiteral)(R) ? Exclude(L, (0, index_1.TemplateLiteralToUnion)(R)) :
                (0, type_2.IsUnion)(L) ? ExcludeRest(L.anyOf, R) :
                    (0, index_4.ExtendsCheck)(L, R) !== index_4.ExtendsResult.False ? (0, index_3.Never)() : L), options);
}
exports.Exclude = Exclude;
