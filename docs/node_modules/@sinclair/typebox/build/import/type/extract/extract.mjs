import { TemplateLiteralToUnion } from '../template-literal/index.mjs';
import { Union } from '../union/index.mjs';
import { Never } from '../never/index.mjs';
import { ExtendsCheck, ExtendsResult } from '../extends/index.mjs';
import { CloneType } from '../clone/type.mjs';
import { ExtractFromMappedResult } from './extract-from-mapped-result.mjs';
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------
import { IsMappedResult, IsTemplateLiteral, IsUnion } from '../guard/type.mjs';
function ExtractRest(L, R) {
    const extracted = L.filter((inner) => ExtendsCheck(inner, R) !== ExtendsResult.False);
    return extracted.length === 1 ? extracted[0] : Union(extracted);
}
/** `[Json]` Constructs a type by extracting from type all union members that are assignable to union */
export function Extract(L, R, options = {}) {
    // prettier-ignore
    return CloneType((IsMappedResult(L) ? ExtractFromMappedResult(L, R, options) :
        IsTemplateLiteral(L) ? Extract(TemplateLiteralToUnion(L), R) :
            IsTemplateLiteral(R) ? Extract(L, TemplateLiteralToUnion(R)) :
                IsUnion(L) ? ExtractRest(L.anyOf, R) :
                    ExtendsCheck(L, R) !== ExtendsResult.False ? L : Never()), options);
}
