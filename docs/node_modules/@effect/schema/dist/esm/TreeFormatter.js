/**
 * @since 1.0.0
 */
import * as Effect from "effect/Effect";
import * as Option from "effect/Option";
import * as Predicate from "effect/Predicate";
import * as AST from "./AST.js";
import * as util_ from "./internal/util.js";
const make = (value, forest = []) => ({
  value,
  forest
});
/**
 * @category formatting
 * @since 1.0.0
 */
export const formatIssue = issue => Effect.map(go(issue), tree => drawTree(tree));
/**
 * @category formatting
 * @since 1.0.0
 */
export const formatIssueSync = issue => Effect.runSync(formatIssue(issue));
/**
 * @category formatting
 * @since 1.0.0
 */
export const formatError = error => formatIssue(error.error);
/**
 * @category formatting
 * @since 1.0.0
 */
export const formatErrorSync = error => formatIssueSync(error.error);
const drawTree = tree => tree.value + draw("\n", tree.forest);
const draw = (indentation, forest) => {
  let r = "";
  const len = forest.length;
  let tree;
  for (let i = 0; i < len; i++) {
    tree = forest[i];
    const isLast = i === len - 1;
    r += indentation + (isLast ? "└" : "├") + "─ " + tree.value;
    r += draw(indentation + (len > 1 && !isLast ? "│  " : "   "), tree.forest);
  }
  return r;
};
const formatTransformationKind = kind => {
  switch (kind) {
    case "Encoded":
      return "Encoded side transformation failure";
    case "Transformation":
      return "Transformation process failure";
    case "Type":
      return "Type side transformation failure";
  }
};
const formatRefinementKind = kind => {
  switch (kind) {
    case "From":
      return "From side refinement failure";
    case "Predicate":
      return "Predicate refinement failure";
  }
};
const getPrevMessage = issue => {
  switch (issue._tag) {
    case "Refinement":
      {
        if (issue.kind === "From") {
          return getMessage(issue.error);
        }
        break;
      }
    case "Transformation":
      return getMessage(issue.error);
  }
  return Option.none();
};
const getCurrentMessage = issue => AST.getMessageAnnotation(issue.ast).pipe(Effect.flatMap(annotation => {
  const out = annotation(issue);
  return Predicate.isString(out) ? Effect.succeed(out) : out;
}));
/** @internal */
export const getMessage = issue => Effect.catchAll(getPrevMessage(issue), () => getCurrentMessage(issue));
const getParseIssueTitleAnnotation = issue => Option.filterMap(AST.getParseIssueTitleAnnotation(issue.ast), annotation => Option.fromNullable(annotation(issue)));
/** @internal */
export const formatTypeMessage = e => getMessage(e).pipe(Effect.orElse(() => getParseIssueTitleAnnotation(e)), Effect.orElse(() => e.message), Effect.catchAll(() => Effect.succeed(`Expected ${e.ast.toString(true)}, actual ${util_.formatUnknown(e.actual)}`)));
const getParseIssueTitle = issue => Option.getOrElse(getParseIssueTitleAnnotation(issue), () => String(issue.ast));
/** @internal */
export const formatForbiddenMessage = e => Option.getOrElse(e.message, () => "is forbidden");
const getTree = (issue, onFailure) => Effect.matchEffect(getMessage(issue), {
  onFailure,
  onSuccess: message => Effect.succeed(make(message))
});
const go = e => {
  switch (e._tag) {
    case "Type":
      return Effect.map(formatTypeMessage(e), make);
    case "Forbidden":
      return Effect.succeed(make(getParseIssueTitle(e), [make(formatForbiddenMessage(e))]));
    case "Unexpected":
      return Effect.succeed(make(`is unexpected, expected ${e.ast.toString(true)}`));
    case "Missing":
      return Effect.succeed(make("is missing"));
    case "Union":
      return getTree(e, () => Effect.map(Effect.forEach(e.errors, e => {
        switch (e._tag) {
          case "Member":
            return Effect.map(go(e.error), tree => make(`Union member`, [tree]));
          default:
            return go(e);
        }
      }), forest => make(getParseIssueTitle(e), forest)));
    case "TupleType":
      return getTree(e, () => Effect.map(Effect.forEach(e.errors, index => Effect.map(go(index.error), tree => make(`[${index.index}]`, [tree]))), forest => make(getParseIssueTitle(e), forest)));
    case "TypeLiteral":
      return getTree(e, () => Effect.map(Effect.forEach(e.errors, key => Effect.map(go(key.error), tree => make(`[${util_.formatUnknown(key.key)}]`, [tree]))), forest => make(getParseIssueTitle(e), forest)));
    case "Transformation":
      return getTree(e, () => Effect.map(go(e.error), tree => make(getParseIssueTitle(e), [make(formatTransformationKind(e.kind), [tree])])));
    case "Refinement":
      return getTree(e, () => Effect.map(go(e.error), tree => make(getParseIssueTitle(e), [make(formatRefinementKind(e.kind), [tree])])));
    case "Declaration":
      return getTree(e, () => {
        const error = e.error;
        const shouldSkipDefaultMessage = error._tag === "Type" && error.ast === e.ast;
        return shouldSkipDefaultMessage ? go(error) : Effect.map(go(error), tree => make(getParseIssueTitle(e), [tree]));
      });
  }
};
//# sourceMappingURL=TreeFormatter.js.map