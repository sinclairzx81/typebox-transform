/**
 * @since 1.0.0
 */
import * as Arr from "effect/Array";
import * as Effect from "effect/Effect";
import * as TreeFormatter from "./TreeFormatter.js";
/**
 * @category formatting
 * @since 1.0.0
 */
export const formatIssue = issue => go(issue);
/**
 * @category formatting
 * @since 1.0.0
 */
export const formatIssueSync = issue => Effect.runSync(formatIssue(issue));
/**
 * @category formatting
 * @since 1.0.0
 */
export const formatError = error => formatIssue(error.error);
/**
 * @category formatting
 * @since 1.0.0
 */
export const formatErrorSync = error => formatIssueSync(error.error);
const getArray = (issue, path, onFailure) => Effect.matchEffect(TreeFormatter.getMessage(issue), {
  onFailure,
  onSuccess: message => Effect.succeed([{
    _tag: issue._tag,
    path,
    message
  }])
});
const go = (e, path = []) => {
  const _tag = e._tag;
  switch (_tag) {
    case "Type":
      return Effect.map(TreeFormatter.formatTypeMessage(e), message => [{
        _tag,
        path,
        message
      }]);
    case "Forbidden":
      return Effect.succeed([{
        _tag,
        path,
        message: TreeFormatter.formatForbiddenMessage(e)
      }]);
    case "Unexpected":
      return Effect.succeed([{
        _tag,
        path,
        message: `is unexpected, expected ${e.ast.toString(true)}`
      }]);
    case "Missing":
      return Effect.succeed([{
        _tag,
        path,
        message: "is missing"
      }]);
    case "Union":
      return getArray(e, path, () => Effect.map(Effect.forEach(e.errors, e => {
        switch (e._tag) {
          case "Member":
            return go(e.error, path);
          default:
            return go(e, path);
        }
      }), Arr.flatten));
    case "TupleType":
      return getArray(e, path, () => Effect.map(Effect.forEach(e.errors, index => go(index.error, [...path, index.index])), Arr.flatten));
    case "TypeLiteral":
      return getArray(e, path, () => Effect.map(Effect.forEach(e.errors, key => go(key.error, [...path, key.key])), Arr.flatten));
    case "Transformation":
    case "Refinement":
    case "Declaration":
      return getArray(e, path, () => go(e.error, path));
  }
};
//# sourceMappingURL=ArrayFormatter.js.map